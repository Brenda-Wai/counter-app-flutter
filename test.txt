static int target_pid = -1; // PID du processus cible
module_param(target_pid, int, 0000);
MODULE_PARM_DESC(target_pid, "PID du processus à surveiller");

//count_int
#include <linux/sched.h>   // Pour la structure task_struct
#include <net/sock.h>      // Pour struct sock

static unsigned int count_packets_in(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
{
    struct net_device *dev = skb->dev;
    struct sock *sk;
    struct task_struct *task;
    
    if (dev && strcmp(dev->name, interface) == 0) {
        sk = skb->sk; // Récupérer la structure socket associée
        if (sk) {
            task = get_pid_task(sock_net(sk)->proc_inum, PIDTYPE_PID);
            if (task && task->pid == target_pid) {
                packets_received_1s++;
                packets_received++;
                bytes_received_1s += skb->len;
                bytes_received += skb->len;
            }
        }
    }
    return NF_ACCEPT;
}

//out
static unsigned int count_packets_out(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
{
    struct net_device *dev = skb->dev;
    struct sock *sk;
    struct task_struct *task;

    if (dev && strcmp(dev->name, interface) == 0) {
        sk = skb->sk; // Obtenir la structure socket
        if (sk) {
            task = get_pid_task(sock_net(sk)->proc_inum, PIDTYPE_PID);
            if (task && task->pid == target_pid) {
                packets_sent_1s++;
                packets_sent++;
                bytes_sent_1s += skb->len;
                bytes_sent += skb->len;
            }
        }
    }
    return NF_ACCEPT;
}

//lkm_init
pr_info("Surveillance activée sur %s pour le PID %d\n", interface, target_pid);
