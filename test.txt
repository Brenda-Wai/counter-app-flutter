#include <linux/module.h>
#include <linux/netfilter.h>
#include <linux/netfilter_ipv4.h>
#include <linux/timer.h>
#include <linux/jiffies.h>
#include <linux/slab.h>

static struct nf_hook_ops *nfho_in = NULL;
static struct nf_hook_ops *nfho_out = NULL;
static struct timer_list my_timer;

/* Compteurs de paquets */
static unsigned long packets_received = 0;
static unsigned long packets_sent = 0;

/* Fonction de hook pour les paquets entrants */
static unsigned int count_packets_in(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
{
    packets_received++; // Incrémentation du compteur de paquets reçus
    return NF_ACCEPT;
}

/* Fonction de hook pour les paquets sortants */
static unsigned int count_packets_out(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
{
    packets_sent++; // Incrémentation du compteur de paquets envoyés
    return NF_ACCEPT;
}

/* Fonction appelée toutes les 5 secondes */
static void report_stats(struct timer_list *t)
{
    pr_info("Stats Réseau: Paquets reçus = %lu, Paquets envoyés = %lu\n", packets_received, packets_sent);

    /* Relancer le timer pour dans 5 secondes */
    mod_timer(&my_timer, jiffies + 5 * HZ);
}

/* Initialisation du module */
static int __init LKM_init(void)
{
    /* Allocation mémoire pour les hooks */
    nfho_in = kcalloc(1, sizeof(struct nf_hook_ops), GFP_KERNEL);
    nfho_out = kcalloc(1, sizeof(struct nf_hook_ops), GFP_KERNEL);
    if (!nfho_in || !nfho_out) {
        pr_err("Échec d'allocation mémoire pour nfho\n");
        return -ENOMEM;
    }

    /* Initialisation du hook pour les paquets entrants */
    nfho_in->hook = count_packets_in;
    nfho_in->hooknum = NF_INET_PRE_ROUTING;
    nfho_in->pf = PF_INET;
    nfho_in->priority = NF_IP_PRI_FIRST;

    /* Initialisation du hook pour les paquets sortants */
    nfho_out->hook = count_packets_out;
    nfho_out->hooknum = NF_INET_POST_ROUTING;
    nfho_out->pf = PF_INET;
    nfho_out->priority = NF_IP_PRI_FIRST;

    /* Enregistrement des hooks */
    if (nf_register_net_hook(&init_net, nfho_in) || nf_register_net_hook(&init_net, nfho_out)) {
        pr_err("Échec de l'enregistrement des hooks Netfilter\n");
        kfree(nfho_in);
        kfree(nfho_out);
        return -1;
    }

    /* Initialisation du timer */
    timer_setup(&my_timer, report_stats, 0);
    mod_timer(&my_timer, jiffies + 5 * HZ);

    pr_info("Module Netfilter chargé : comptage des paquets actif\n");
    return 0;
}

/* Nettoyage du module */
static void __exit LKM_exit(void)
{
    del_timer(&my_timer); // Supprimer le timer
    nf_unregister_net_hook(&init_net, nfho_in);
    nf_unregister_net_hook(&init_net, nfho_out);
    kfree(nfho_in);
    kfree(nfho_out);
    pr_info("Module Netfilter déchargé\n");
}

module_init(LKM_init);
module_exit(LKM_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Vous");
MODULE_DESCRIPTION("Module Netfilter comptant les paquets réseau toutes les 5 secondes");
